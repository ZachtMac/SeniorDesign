@model IEnumerable<GearNet.Entities.Device>

@{
    ViewData["Title"] = "Index";
}
<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            background-size: 100% 100%;
            background-repeat: no-repeat;
            background-attachment: fixed;
            background-color: rgba(255, 255, 255, 1); /* Adjust the alpha (0.5) for the desired opacity */
        }

        div {
            padding: 5px;
        }

        .tableForm {
            background-color: rgba(255, 255, 255, .90); /* Adjust the alpha (0.5) for the desired opacity */
        }

        .dropbtn {
            background-color: #3498DB;
            color: white;
            padding: 16px;
            font-size: 16px;
            border: none;
            cursor: pointer;
        }

            .dropbtn:hover, .dropbtn:focus {
                background-color: #2980B9;
            }

        .dropdown {
            position: relative;
            display: inline-block;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f1f1f1;
            min-width: 160px;
            overflow: auto;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 2;
            right: 0; /* Align with the right side of the button */
        }


            .dropdown-content a {
                color: black;
                padding: 12px 16px;
                text-decoration: none;
                display: block;
            }

        .dropdown a:hover {
            background-color: #115d39;
        }

        /* Add this CSS to your existing styles */
        #arrowIcon {
            display: inline-block;
            width: 0;
            height: 0;
            border-left: 5px solid transparent;
            border-right: 5px solid transparent;
            border-top: 5px solid #fff; /* Set the color of the arrow to match your button's background */
            margin-left: 5px; /* Adjust the margin to position the arrow correctly */
            transition: transform 0.3s; /* Add a smooth transition for the arrow icon */
        }

        .grey-text {
            color: grey;
        }

        .show {
            display: block;
        }

        .arrow-down {
            display: inline-block;
            width: 0;
            height: 0;
            border-left: 5px solid transparent;
            border-right: 5px solid transparent;
            border-top: 5px solid #000;
            transition: transform 0.3s;
        }

        .select-container {
            display: flex;
            align-items: center;
            position: relative;
        }

            .select-container select {
                width: 100%;
            }

            .select-container.active .arrow-down {
                transform: rotate(180deg);
            }


        table {
            background-color: rgba(255, 255, 255, 0); /* Adjust the alpha (0.5) for the desired opacity */
        }

        .table thead th {
            position: sticky;
            top: 0;
            background-color: #fff; /* Optional: Set background color for sticky headers */
            z-index: 1; /* Ensure it's above other content */
        }

    </style>
</head>
<body>
    <div class="tableForm">
        <form method="get" asp-action="Index">
            <div class="row" style="width: 100%; flex-wrap: nowrap">
                <div class="col-7" style="margin-right: 5px;">
                    <div class="form-group">
                        <h1>Devices</h1>
                    </div>
                </div>
                <div class="col-5" style="display: flex; justify-content: flex-end;">
                    <div class="dropdown" style="margin-left: auto;">
                        <div style="display: flex">
                            <a data-testid="createDevice" asp-action="Create" class="btn btn-success" style="margin-right: 10px;">Create New</a>
                            <button data-testid="searchDevice" id="dropdownButton" class="dropbtn" style="border-radius: 0.25rem; padding: 7.5px">
                                Search <span id="arrowIcon"></span>
                            </button>
                        </div>
                        <div id="myDropdown" class="dropdown-content" style="padding: 10px; width: 250px">
                            @if (ViewData.ContainsKey("deviceName"))
                            {
                                <div style="margin-bottom: 10px;">
                                    Name: <input data-testid="searchDevicename" type="text" name="deviceName" class="form-control" placeholder="Device Name..." value="@ViewData["deviceName"]" />
                                </div>
                            }
                            else
                            {
                                <div style="margin-bottom: 10px;">
                                    Name: <input data-testid="searchDevicename" type="text" name="deviceName" class="form-control" placeholder="Device Name..." />
                                </div>
                            }
                            @if (ViewData.ContainsKey("deviceType"))
                            {
                                <div style="margin-bottom: 10px;">
                                    Type: <input data-testid="searchDeviceType" type="text" name="deviceType" class="form-control" placeholder="Device Type..." value="@ViewData["deviceType"]" />
                                </div>
                            }
                            else
                            {
                                <div style="margin-bottom: 10px;">
                                    Type: <input data-testid="searchDeviceType" type="text" name="deviceType" class="form-control" placeholder="Device Type..." />
                                </div>
                            }

                            @if (ViewData.ContainsKey("rackRow"))
                            {
                                <div style="margin-bottom: 10px;">
                                    Row: <input data-testid="searchRackRow" type="number" name="rackRow" class="form-control" placeholder="Rack Row..." value="@ViewData["rackRow"]" />
                                </div>
                            }
                            else
                            {
                                <div style="margin-bottom: 10px;">
                                    Row: <input data-testid="searchRackRow" type="number" name="rackRow" class="form-control" placeholder="Rack Row..." />
                                </div>
                            }

                            @if (ViewData.ContainsKey("rackCol"))
                            {
                                <div style="margin-bottom: 10px;">
                                    Column: <input data-testid="searchRackCol" type="number" name="rackCol" class="form-control" placeholder="Rack Column..." value="@ViewData["rackCol"]" />
                                </div>
                            }
                            else
                            {
                                <div style="margin-bottom: 10px;">
                                    Column: <input data-testid="searchRackCol" type="number" name="rackCol" class="form-control" placeholder="Rack Column..." />
                                </div>
                            }
                            <div style="margin-bottom: 10px;" class="dropdown-select">
                                Checked Out:
                                <select data-testid="searchCheckOut" id="isCheckedOutSelect" name="isCheckedOut" class="form-control">
                                    <option style="color: grey" value="unselected" selected='@((string)ViewData["isCheckedOut"] == "unselected" ? "selected" : null)'>(Select All)</option>
                                    <option data-testid="deviceOut" value="true" selected='@((string)ViewData["isCheckedOut"] == "true" ? "selected" : null)'>True</option>
                                    <option data-testid="deviceIn" value="false" selected='@((string)ViewData["isCheckedOut"] == "false" ? "selected" : null)'>False</option>
                                </select>
                            </div>



                            <button data-testid="searchDeviceList" type="submit" class="btn btn-primary btn-block" onclick="" style="margin-top: 10px;">Search</button>
                            <button data-testid="resetSearch" type="submit" class="btn btn-secondary btn-block" onclick="clearSearch()" style="margin-top: 10px;">Reset</button>

                        </div>
                    </div>
                </div>
            </div>
        </form>
        <div style="height: 620px; overflow-y: auto; margin-bottom: 0rem">
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.DeviceName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.DeviceType)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.RackRow)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.RackCol)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.IsCheckedOut)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Case.CaseId)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Student.StudentId)
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int rowIndex = 1;
                    }
                    @foreach (var item in Model)
                    {
                        <tr data-testid="deviceListRow-@rowIndex">
                            <td data-testid="listDeviceName">
                                @Html.DisplayFor(modelItem => item.DeviceName)
                            </td>
                            <td data-testid="listDeviceType">
                                @Html.DisplayFor(modelItem => item.DeviceType)
                            </td>
                            <td data-testid="listRackRow">
                                @Html.DisplayFor(modelItem => item.RackRow)
                            </td>
                            <td data-testid="listRackCol">
                                @Html.DisplayFor(modelItem => item.RackCol)
                            </td>
                            <td data-testid="listCheckedOut">
                                @item.IsCheckedOut.ToString()
                            </td>
                            <td data-testid="listCaseId">
                                @Html.DisplayFor(modelItem => item.CaseId)
                            </td>
                            <td data-testid="listStudentId">
                                @Html.DisplayFor(modelItem => item.StudentId)
                            </td>
                            <td class="button-container">
                                <div class="button-box button-box-1">
                                    <a data-testid="edit-@item.DeviceId" asp-action="Edit" asp-route-id="@item.DeviceId"
                                       class="btn btn-primary">Edit</a>
                                    <a data-testid="details-@item.DeviceId" asp-action="Details" asp-route-id="@item.DeviceId"
                                       class="btn btn-secondary">Details</a>
                                    <a data-testid="delete-@item.DeviceId" asp-action="Delete" asp-route-id="@item.DeviceId"
                                       class="btn btn-danger">Delete</a>
                                </div>
                                <div class="button-box button-box-2" style="flex-direction:column; display: none">
                                    <a data-testid="edit-@item.DeviceId" asp-action="Edit" asp-route-id="@item.DeviceId"
                                       class="btn btn-primary">Edit</a>
                                    <a data-testid="details-@item.DeviceId" asp-action="Details" asp-route-id="@item.DeviceId"
                                       class="btn btn-secondary">Details</a>
                                    <a data-testid="delete-@item.DeviceId" asp-action="Delete" asp-route-id="@item.DeviceId"
                                       class="btn btn-danger">Delete</a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <nav aria-label="Page navigation example">
            <ul id="pagination" class="pagination">
                <!-- Pagination links will be dynamically generated here -->
            </ul>
        </nav>
    </div>
</body>
</html>
@section scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Calculate the total width of all buttons in buttonBox1 only once
            var buttonBox1 = document.querySelector('.button-box-1');
            var totalButtonsWidth = 0;
            buttonBox1.childNodes.forEach(function (node) {
                if (node.offsetWidth) {
                    totalButtonsWidth += node.offsetWidth;
                }
            });

            function checkButtonContainerWrap() {
                // Iterate through each row
                document.querySelectorAll('tbody tr').forEach(function (row) {
                    var buttonContainer = row.querySelector('.button-container');
                    var buttonBox1 = row.querySelector('.button-box-1');
                    var buttonBox2 = row.querySelector('.button-box-2');
                    var availableWidth = buttonContainer.clientWidth;

                    // Toggle the visibility of buttonBox1 or buttonBox2 based on available space
                    if (buttonBox1.style.display !== 'none') {
                        if (totalButtonsWidth >= availableWidth*0.75) {
                            buttonBox1.style.display = 'none';
                            buttonBox2.style.display = 'flex';
                            console.log("1a")
                        }
                        else {
                            buttonBox1.style.display = 'block';
                            buttonBox2.style.display = 'none';
                            console.log("2a")
                        }
                    }
                    else {
                        if (totalButtonsWidth * 0.75 >= availableWidth) {
                            buttonBox1.style.display = 'none';
                            buttonBox2.style.display = 'flex';
                            console.log("1b")
                        }
                        else {
                            buttonBox1.style.display = 'block';
                            buttonBox2.style.display = 'none';
                            console.log("2b")
                        }
                    }
                });
            }

            // Call the function initially
            checkButtonContainerWrap();

            // Add event listener for window resize
            window.addEventListener('resize', checkButtonContainerWrap);
        });
    </script>
    <script>
        var searchValues = {};
        document.getElementById("dropdownButton").addEventListener("click", function (event) {
            event.preventDefault();
            toggleDropdown();
        });

        document.addEventListener("DOMContentLoaded", function () {
            const isCheckedOutSelect = document.getElementById("isCheckedOutSelect");
            isCheckedOutSelect.addEventListener("change", function () {
                if (isCheckedOutSelect.value === "unselected") {
                    isCheckedOutSelect.classList.add("grey-text");
                } else {
                    isCheckedOutSelect.classList.remove("grey-text");
                }
            });

        });


        function toggleDropdown() {
            const isCheckedOutSelect = document.getElementById("isCheckedOutSelect");
            var dropdown = document.getElementById("myDropdown");
            var arrowIcon = document.getElementById("arrowIcon");
            var selectContainer = document.querySelector(".select-container");

            if (isCheckedOutSelect.value === "unselected") {
                isCheckedOutSelect.classList.add("grey-text");
            }

            if (dropdown.style.display === "block") {
                dropdown.style.display = "none";
                arrowIcon.style.transform = "rotate(0deg)";
                selectContainer.classList.remove("active");
            } else {
                dropdown.style.display = "block";
                arrowIcon.style.transform = "rotate(180deg)";
                selectContainer.classList.add("active");
            }
        }

        function clearSearch() {
            const isCheckedOutSelect = document.getElementById("isCheckedOutSelect");

            isCheckedOutSelect.value = "unselected"


            document.querySelector('input[name="deviceName"]').value = "";
            document.querySelector('input[name="deviceType"]').value = "";
            document.querySelector('input[name="rackRow"]').value = "";
            document.querySelector('input[name="rackCol"]').value = "";
            document.querySelector('input[name="caseId"]').value = "";
            document.querySelector('input[name="studentId"]').value = "";
        }
    </script>
    <script>
        // Initialize pagination
        $(document).ready(function () {
            var rows = $('tbody').find('tr');
            var pageSize = 10;
            var pageCount = Math.ceil(rows.length / pageSize);

            var paginationContainer = $('#pagination');

            // Pagination links
            for (var i = 1; i <= pageCount; i++) {
                var li = $('<li></li>').addClass('page-item').attr('data-page', i);
                var link = $('<a></a>').addClass('page-link').text(i);

                li.append(link);
                paginationContainer.append(li);
            }

            // Add active class to the first page link
            paginationContainer.find('.page-item:first-child').addClass('active');

            // Function to handle pagination
            paginationContainer.on('click', '.page-item', function () {
                var pageNumber = parseInt($(this).attr('data-page'));
                var start = pageSize * (pageNumber - 1);
                var end = start + pageSize;

                rows.hide().slice(start, end).show();

                // Remove active class from all pagination links
                paginationContainer.find('.page-item').removeClass('active');
                // Add active class to the selected pagination link
                $(this).addClass('active');
            });

            // Show only the first page initially
            paginationContainer.find('.page-item:first-child').click();
        });
    </script>
}
