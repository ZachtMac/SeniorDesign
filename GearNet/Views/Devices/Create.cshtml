@model GearNet.Entities.Device

@{
    ViewData["Title"] = "New Device";
}

<h1>Create New Device</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="DeviceName" class="control-label"></label>
                <input asp-for="DeviceName" class="form-control" />
                <span asp-validation-for="DeviceName" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="DeviceType" class="control-label"></label>
                <input asp-for="DeviceType" class="form-control" />
                <span asp-validation-for="DeviceType" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label class="control-label">Checked Out</label>
            </div>

            <div 
                class="form-group" 
                style="flex-direction: row; align-items: center"
            >
                <label class="switch" style="margin-right: 10px;">
                    <input type="checkbox" id="IsCheckedOutSwitch" />
                    <span class="slider round"></span>
                </label>
                <span id="toggleText" class="ml-2">False</span>
                <input asp-for="IsCheckedOut" type="hidden" />
            </div>

            <div class="form-group" style="flex-direction: row;">
                <a asp-action="Index" class="btn btn-secondary">Cancel</a>
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
            <div class="form-group">
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const isCheckedOutSwitch = document.getElementById("IsCheckedOutSwitch");
            const toggleText = document.getElementById("toggleText");

            isCheckedOutSwitch.addEventListener("change", function () {
                const isCheckedOutHidden = document.querySelector('[name="IsCheckedOut"]');
                isCheckedOutHidden.value = isCheckedOutSwitch.checked;
                toggleText.textContent = isCheckedOutSwitch.checked ? "True" : "False";
            });

            isCheckedOutSwitch.checked = false;
            const isCheckedOutHidden = document.querySelector('[name="IsCheckedOut"]');
            isCheckedOutHidden.value = "False";
        });
    </script>
}

<style>

    .control-label {
        font-weight: bold;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        padding: 2.5px;
    }

    /* The switch - the box around the slider */
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

    /* Hide default HTML checkbox */
    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    /* The slider */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: 0.4s;
    }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

    .slider.round:before {
        border-radius: 50%;
    }
</style>
