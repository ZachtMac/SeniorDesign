@model IEnumerable<GearNet.Entities.Case>

@{
    ViewData["Title"] = "Index";
}


<!DOCTYPE html>
<html>
<head>

</head>
<body>
    <div class="tableForm">
        <form method="get" asp-action="Index">
            <div class="row" style="width: 100%; flex-wrap: nowrap">
                <div class="col-7" style="margin-right: 5px;">
                    <div class="form-group">
                        <h1>Cases</h1>
                    </div>
                </div>
                <div class="col-5" style="display: flex; justify-content: flex-end;">
                    <div class="dropdown" style="margin-left: auto;">
                        <div style="display: flex">
                            <a data-testid="createCase" asp-action="Create" class="green-hover btn btn-success" style="margin-right: 10px;">Create New</a>
                            <button data-testid="searchCase" id="dropdownButton" class="dropbtn" style="border-radius: 0.25rem; padding: 7.5px;">
                                Search <span id="arrowIcon"></span>
                            </button>
                        </div>

                        <div id="myDropdown" class="dropdown-content" style="padding: 10px; width: 250px">
                            @if (ViewData.ContainsKey("caseName"))
                            {
                                <div style="margin-bottom: 10px;">
                                    Case Name: <input data-testid="searchCasename" type="text" name="caseName" class="form-control" placeholder="Case Name..." value="@ViewData["caseName"]" />
                                </div>
                            }
                            else
                            {
                                <div style="margin-bottom: 10px;">
                                    Case Name: <input data-testid="searchCasename" type="text" name="caseName" class="form-control" placeholder="Case Name..." />
                                </div>
                            }
                            <div style="margin-bottom: 10px;">
                                Start Date:
                                @if (ViewData.ContainsKey("startDate"))
                                {
                                    <input data-testid="searchStartdate" type="date" name="startDate" class="form-control" placeholder="" value="@ViewData["startDate"]" />
                                }
                                else
                                {
                                    <input data-testid="searchStartdate" type="date" name="startDate" class="form-control" placeholder="" />
                                }
                            </div>


                            @if (ViewData.ContainsKey("duration"))
                            {
                                <div style="margin-bottom: 10px;">
                                    Duration: <input data-testid="searchDuration" type="number" name="duration" class="form-control" placeholder="Duration..." value="@ViewData["duration"]" />
                                </div>
                            }
                            else
                            {
                                <div style="margin-bottom: 10px;">
                                    Duration: <input data-testid="searchDuration" type="number" name="duration" class="form-control" placeholder="Duration..." />
                                </div>
                            }
                            @if (ViewData.ContainsKey("studentUser"))
                            {
                                <div style="margin-bottom: 10px;">
                                    Student Username: <input data-testid="searchUsername" type="text" name="studentUser" class="form-control" placeholder="Student Username..." value="@ViewData["studentUser"]" />
                                </div>
                            }
                            else
                            {
                                <div style="margin-bottom: 10px;">
                                    Student Username: <input data-testid="searchUsername" type="text" name="studentUser" class="form-control" placeholder="Student Username..." />
                                </div>
                            }
                            <button data-testid="searchCaselist" type="submit" class="btn btn-primary btn-block" style="margin-top: 10px;">Search</button>
                            <button data-testid="resetSearch" type="submit" class="btn btn-secondary btn-block" onclick="clearSearch()" style="margin-top: 10px;">Reset</button>

                        </div>
                    </div>
                </div>
            </div>
        </form>
        <div style="height: 620px; overflow-y: auto; margin-bottom: 0rem">
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.CaseName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.DateTime)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Duration)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Username)
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int rowIndex = 1;
                    }
                    @foreach (var item in Model)
                    {
                        <tr data-testid="caseListRow-@rowIndex">
                            <td data-testid="listCasename">
                                @Html.DisplayFor(modelItem => item.CaseName)
                            </td>
                            <td data-testid="listStartdate">
                                @Html.DisplayFor(modelItem => item.DateTime)
                            </td>
                            <td data-testid="listDuration">
                                @Html.DisplayFor(modelItem => item.Duration)
                            </td>
                            <td data-testid="listUsername">
                                @Html.DisplayFor(modelItem => item.Username)
                            </td>
                            <td>
                                <a data-testid="edit-@item.CaseId" asp-action="Edit" asp-route-id="@item.CaseId"
                                   class="btn btn-primary">Edit</a>
                                <a data-testid="details-@item.CaseId" asp-action="Details" asp-route-id="@item.CaseId"
                                   class="btn btn-secondary">Details</a>
                                <a data-testid="delete-@item.CaseId" asp-action="Delete" asp-route-id="@item.CaseId"
                                   class="btn btn-danger">Delete</a>
                            </td>
                        </tr>
                        rowIndex++;
                    }
                </tbody>

            </table>
        </div>
        <nav aria-label="Page navigation example">
            <ul id="pagination" class="pagination">
                <!-- Pagination links will be dynamically generated here -->
            </ul>
        </nav>
    </div>

    <script>
        var searchValues = {};
        document.getElementById("dropdownButton").addEventListener("click", function (event) {
            event.preventDefault();
            toggleDropdown();
        });


        document.addEventListener("DOMContentLoaded", function () {
            const isCheckedOutSwitch = document.getElementById("IsCheckedOutSwitch");
            const isCheckedOutHidden = document.querySelector('input[name="isCheckedOut"]');
            const toggleText = document.getElementById("toggleText");

            isCheckedOutSwitch.addEventListener("change", function () {
                if (isCheckedOutSwitch.checked) {
                    isCheckedOutHidden.value = "True";
                    toggleText.textContent = "True";
                } else {
                    isCheckedOutHidden.value = "False";
                    toggleText.textContent = "False";
                }
            });

            isCheckedOutHidden.value = isCheckedOutSwitch.checked ? "True" : "False";
        });

        function toggleDropdown() {
            var dropdown = document.getElementById("myDropdown");
            var button = document.getElementById("dropdownButton");

            if (dropdown.classList.contains("show")) {
                dropdown.classList.remove("show");
                button.classList.remove("active");
            } else {
                dropdown.classList.add("show");
                button.classList.add("active");
            }
        }

        function clearSearch() {
            document.querySelector('input[name="caseName"]').value = "";
            document.querySelector('input[name="startDate"]').value = "";
            document.querySelector('input[name="duration"]').value = "";
            document.querySelector('input[name="studentUser"]').value = "";
        }
    </script>
    <style>
        body {
            background-size: 100% 100%;
            background-repeat: no-repeat;
            background-attachment: fixed;
            background-color: rgba(255, 255, 255, 1); /* Adjust the alpha (0.5) for the desired opacity */
        }

        div {
            padding: 5px;
        }

        .tableForm {
            background-color: rgba(255, 255, 255, .90); /* Adjust the alpha (0.5) for the desired opacity */
        }

        .dropbtn {
            background-color: #3498DB;
            color: white;
            padding: 16px;
            font-size: 16px;
            border: none;
            cursor: pointer;
        }

            .dropbtn:hover, .dropbtn:focus {
                background-color: #2980B9;
            }

        .dropdown {
            position: relative;
            display: inline-block;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f1f1f1;
            min-width: 160px;
            overflow: auto;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            right: 0; /* Align the right side of the dropdown with the button */
        }

            .dropdown-content a {
                color: black;
                padding: 12px 16px;
                text-decoration: none;
                display: block;
            }

        .dropdown a:hover {
            background-color: #115d39;
        }


        /* Add this CSS to your existing styles */
        #arrowIcon {
            display: inline-block;
            width: 0;
            height: 0;
            border-left: 5px solid transparent;
            border-right: 5px solid transparent;
            border-top: 5px solid #fff; /* Set the color of the arrow to match your button's background */
            margin-left: 5px; /* Adjust the margin to position the arrow correctly */
            transition: transform 0.3s; /* Add a smooth transition for the arrow icon */
        }

        .dropbtn.active #arrowIcon {
            transform: rotate(180deg); /* Rotate the arrow 180 degrees when active */
        }

        .show {
            display: block;
        }
        /* The switch - the box around the slider */
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

            /* Hide default HTML checkbox */
            .switch input {
                opacity: 0;
                width: 0;
                height: 0;
            }

        /* The slider */
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: 0.4s;
        }

            .slider:before {
                position: absolute;
                content: "";
                height: 26px;
                width: 26px;
                left: 4px;
                bottom: 4px;
                background-color: white;
                transition: 0.4s;
            }

        input:checked + .slider {
            background-color: #2196F3;
        }

        input:focus + .slider {
            box-shadow: 0 0 1px #2196F3;
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        table {
            background-color: rgba(255, 255, 255, 0); /* Adjust the alpha (0.5) for the desired opacity */
        }

        .green-hover:hover {
            background-color: #29a76d;
            border-color: #29a76d
        }

        /* Rounded sliders */
        .slider.round {
            border-radius: 34px;
        }

            .slider.round:before {
                border-radius: 50%;
            }
    </style>
</body>
</html>

@section scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <script>
        // Initialize pagination
        $(document).ready(function () {
            var rows = $('tbody').find('tr');
            var pageSize = 10;
            var pageCount = Math.ceil(rows.length / pageSize);

            var paginationContainer = $('#pagination');

            // Pagination links
            for (var i = 1; i <= pageCount; i++) {
                var li = $('<li></li>').addClass('page-item').attr('data-page', i);
                var link = $('<a></a>').addClass('page-link').text(i);

                li.append(link);
                paginationContainer.append(li);
            }

            // Add active class to the first page link
            paginationContainer.find('.page-item:first-child').addClass('active');

            // Function to handle pagination
            paginationContainer.on('click', '.page-item', function () {
                var pageNumber = parseInt($(this).attr('data-page'));
                var start = pageSize * (pageNumber - 1);
                var end = start + pageSize;

                rows.hide().slice(start, end).show();

                // Remove active class from all pagination links
                paginationContainer.find('.page-item').removeClass('active');
                // Add active class to the selected pagination link
                $(this).addClass('active');
            });

            // Show only the first page initially
            paginationContainer.find('.page-item:first-child').click();
        });
    </script>
}
